// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package G_APPL;

public final class TMDataControl_Stub
    extends java.rmi.server.RemoteStub
    implements G_APPL.IMDataControl, G_APPL.IAccount
{
    private static java.rmi.server.Operation[] operations = {
        new java.rmi.server.Operation("void IAcc_PayEnrol(int, boolean)"), 
        new java.rmi.server.Operation("void IMD_CloseCnct(java.lang.String)"), 
        new java.rmi.server.Operation("borland.jbcl.dataset.Column IMD_GetColumns(java.lang.String)[]"), 
        new java.rmi.server.Operation("borland.jbcl.dataset.ParameterRow IMD_GetParameterRow(java.lang.String)"), 
        new java.rmi.server.Operation("void IMD_OpenCnct(java.lang.String, java.lang.String, java.lang.String)"), 
        new java.rmi.server.Operation("G_APPL.TDataRet IMD_ProvideData(java.lang.String, int, int, boolean, G_APPL.TParameterRow_ValTransfer)"), 
        new java.rmi.server.Operation("borland.jbcl.dataset.DataSetData IMD_ProvideDataAll(java.lang.String)"), 
        new java.rmi.server.Operation("borland.jbcl.dataset.DataSetData IMD_ResolveChanges(java.lang.String, borland.jbcl.dataset.DataSetData, boolean)[]"), 
        new java.rmi.server.Operation("void IMD_SetQueryText(java.lang.String, java.lang.String, java.lang.String)")
    };
    
    private static final long interfaceHash = -8849498493978127825L;
    
    // Constructors
    public TMDataControl_Stub() {
        super();
    }
    public TMDataControl_Stub(java.rmi.server.RemoteRef rep) {
        super(rep);
    }
    // Methods from remote interfaces
    
    // Implementation of IAcc_PayEnrol
    public void IAcc_PayEnrol(int $_int_1, boolean $_boolean_2) throws borland.jbcl.dataset.DataSetException, java.rmi.RemoteException {
        int opnum = 0;
        java.rmi.server.RemoteRef sub = ref;
        java.rmi.server.RemoteCall call = sub.newCall((java.rmi.server.RemoteObject)this, operations, opnum, interfaceHash);
        try {
            java.io.ObjectOutput out = call.getOutputStream();
            out.writeInt($_int_1);
            out.writeBoolean($_boolean_2);
        } catch (java.io.IOException ex) {
            throw new java.rmi.MarshalException("Error marshaling arguments", ex);
        };
        try {
            sub.invoke(call);
        } catch (borland.jbcl.dataset.DataSetException ex) {
            throw ex;
        } catch (java.rmi.RemoteException ex) {
            throw ex;
        } catch (java.lang.Exception ex) {
            throw new java.rmi.UnexpectedException("Unexpected exception", ex);
        };
        sub.done(call);
        return;
    }
    
    // Implementation of IMD_CloseCnct
    public void IMD_CloseCnct(java.lang.String $_String_1) throws borland.jbcl.dataset.DataSetException, java.rmi.RemoteException {
        int opnum = 1;
        java.rmi.server.RemoteRef sub = ref;
        java.rmi.server.RemoteCall call = sub.newCall((java.rmi.server.RemoteObject)this, operations, opnum, interfaceHash);
        try {
            java.io.ObjectOutput out = call.getOutputStream();
            out.writeObject($_String_1);
        } catch (java.io.IOException ex) {
            throw new java.rmi.MarshalException("Error marshaling arguments", ex);
        };
        try {
            sub.invoke(call);
        } catch (borland.jbcl.dataset.DataSetException ex) {
            throw ex;
        } catch (java.rmi.RemoteException ex) {
            throw ex;
        } catch (java.lang.Exception ex) {
            throw new java.rmi.UnexpectedException("Unexpected exception", ex);
        };
        sub.done(call);
        return;
    }
    
    // Implementation of IMD_GetColumns
    public borland.jbcl.dataset.Column[] IMD_GetColumns(java.lang.String $_String_1) throws borland.jbcl.dataset.DataSetException, java.rmi.RemoteException {
        int opnum = 2;
        java.rmi.server.RemoteRef sub = ref;
        java.rmi.server.RemoteCall call = sub.newCall((java.rmi.server.RemoteObject)this, operations, opnum, interfaceHash);
        try {
            java.io.ObjectOutput out = call.getOutputStream();
            out.writeObject($_String_1);
        } catch (java.io.IOException ex) {
            throw new java.rmi.MarshalException("Error marshaling arguments", ex);
        };
        try {
            sub.invoke(call);
        } catch (borland.jbcl.dataset.DataSetException ex) {
            throw ex;
        } catch (java.rmi.RemoteException ex) {
            throw ex;
        } catch (java.lang.Exception ex) {
            throw new java.rmi.UnexpectedException("Unexpected exception", ex);
        };
        borland.jbcl.dataset.Column[] $result;
        try {
            java.io.ObjectInput in = call.getInputStream();
            $result = (borland.jbcl.dataset.Column[])in.readObject();
        } catch (java.io.IOException ex) {
            throw new java.rmi.UnmarshalException("Error unmarshaling return", ex);
        } catch (java.lang.ClassNotFoundException ex) {
            throw new java.rmi.UnmarshalException("Return value class not found", ex);
        } catch (Exception ex) {
            throw new java.rmi.UnexpectedException("Unexpected exception", ex);
        } finally {
            sub.done(call);
        }
        return $result;
    }
    
    // Implementation of IMD_GetParameterRow
    public borland.jbcl.dataset.ParameterRow IMD_GetParameterRow(java.lang.String $_String_1) throws borland.jbcl.dataset.DataSetException, java.rmi.RemoteException {
        int opnum = 3;
        java.rmi.server.RemoteRef sub = ref;
        java.rmi.server.RemoteCall call = sub.newCall((java.rmi.server.RemoteObject)this, operations, opnum, interfaceHash);
        try {
            java.io.ObjectOutput out = call.getOutputStream();
            out.writeObject($_String_1);
        } catch (java.io.IOException ex) {
            throw new java.rmi.MarshalException("Error marshaling arguments", ex);
        };
        try {
            sub.invoke(call);
        } catch (borland.jbcl.dataset.DataSetException ex) {
            throw ex;
        } catch (java.rmi.RemoteException ex) {
            throw ex;
        } catch (java.lang.Exception ex) {
            throw new java.rmi.UnexpectedException("Unexpected exception", ex);
        };
        borland.jbcl.dataset.ParameterRow $result;
        try {
            java.io.ObjectInput in = call.getInputStream();
            $result = (borland.jbcl.dataset.ParameterRow)in.readObject();
        } catch (java.io.IOException ex) {
            throw new java.rmi.UnmarshalException("Error unmarshaling return", ex);
        } catch (java.lang.ClassNotFoundException ex) {
            throw new java.rmi.UnmarshalException("Return value class not found", ex);
        } catch (Exception ex) {
            throw new java.rmi.UnexpectedException("Unexpected exception", ex);
        } finally {
            sub.done(call);
        }
        return $result;
    }
    
    // Implementation of IMD_OpenCnct
    public void IMD_OpenCnct(java.lang.String $_String_1, java.lang.String $_String_2, java.lang.String $_String_3) throws borland.jbcl.dataset.DataSetException, java.rmi.RemoteException {
        int opnum = 4;
        java.rmi.server.RemoteRef sub = ref;
        java.rmi.server.RemoteCall call = sub.newCall((java.rmi.server.RemoteObject)this, operations, opnum, interfaceHash);
        try {
            java.io.ObjectOutput out = call.getOutputStream();
            out.writeObject($_String_1);
            out.writeObject($_String_2);
            out.writeObject($_String_3);
        } catch (java.io.IOException ex) {
            throw new java.rmi.MarshalException("Error marshaling arguments", ex);
        };
        try {
            sub.invoke(call);
        } catch (borland.jbcl.dataset.DataSetException ex) {
            throw ex;
        } catch (java.rmi.RemoteException ex) {
            throw ex;
        } catch (java.lang.Exception ex) {
            throw new java.rmi.UnexpectedException("Unexpected exception", ex);
        };
        sub.done(call);
        return;
    }
    
    // Implementation of IMD_ProvideData
    public G_APPL.TDataRet IMD_ProvideData(java.lang.String $_String_1, int $_int_2, int $_int_3, boolean $_boolean_4, G_APPL.TParameterRow_ValTransfer $_TParameterRow_ValTransfer_5) throws borland.jbcl.dataset.DataSetException, java.rmi.RemoteException {
        int opnum = 5;
        java.rmi.server.RemoteRef sub = ref;
        java.rmi.server.RemoteCall call = sub.newCall((java.rmi.server.RemoteObject)this, operations, opnum, interfaceHash);
        try {
            java.io.ObjectOutput out = call.getOutputStream();
            out.writeObject($_String_1);
            out.writeInt($_int_2);
            out.writeInt($_int_3);
            out.writeBoolean($_boolean_4);
            out.writeObject($_TParameterRow_ValTransfer_5);
        } catch (java.io.IOException ex) {
            throw new java.rmi.MarshalException("Error marshaling arguments", ex);
        };
        try {
            sub.invoke(call);
        } catch (borland.jbcl.dataset.DataSetException ex) {
            throw ex;
        } catch (java.rmi.RemoteException ex) {
            throw ex;
        } catch (java.lang.Exception ex) {
            throw new java.rmi.UnexpectedException("Unexpected exception", ex);
        };
        G_APPL.TDataRet $result;
        try {
            java.io.ObjectInput in = call.getInputStream();
            $result = (G_APPL.TDataRet)in.readObject();
        } catch (java.io.IOException ex) {
            throw new java.rmi.UnmarshalException("Error unmarshaling return", ex);
        } catch (java.lang.ClassNotFoundException ex) {
            throw new java.rmi.UnmarshalException("Return value class not found", ex);
        } catch (Exception ex) {
            throw new java.rmi.UnexpectedException("Unexpected exception", ex);
        } finally {
            sub.done(call);
        }
        return $result;
    }
    
    // Implementation of IMD_ProvideDataAll
    public borland.jbcl.dataset.DataSetData IMD_ProvideDataAll(java.lang.String $_String_1) throws borland.jbcl.dataset.DataSetException, java.rmi.RemoteException {
        int opnum = 6;
        java.rmi.server.RemoteRef sub = ref;
        java.rmi.server.RemoteCall call = sub.newCall((java.rmi.server.RemoteObject)this, operations, opnum, interfaceHash);
        try {
            java.io.ObjectOutput out = call.getOutputStream();
            out.writeObject($_String_1);
        } catch (java.io.IOException ex) {
            throw new java.rmi.MarshalException("Error marshaling arguments", ex);
        };
        try {
            sub.invoke(call);
        } catch (borland.jbcl.dataset.DataSetException ex) {
            throw ex;
        } catch (java.rmi.RemoteException ex) {
            throw ex;
        } catch (java.lang.Exception ex) {
            throw new java.rmi.UnexpectedException("Unexpected exception", ex);
        };
        borland.jbcl.dataset.DataSetData $result;
        try {
            java.io.ObjectInput in = call.getInputStream();
            $result = (borland.jbcl.dataset.DataSetData)in.readObject();
        } catch (java.io.IOException ex) {
            throw new java.rmi.UnmarshalException("Error unmarshaling return", ex);
        } catch (java.lang.ClassNotFoundException ex) {
            throw new java.rmi.UnmarshalException("Return value class not found", ex);
        } catch (Exception ex) {
            throw new java.rmi.UnexpectedException("Unexpected exception", ex);
        } finally {
            sub.done(call);
        }
        return $result;
    }
    
    // Implementation of IMD_ResolveChanges
    public borland.jbcl.dataset.DataSetData[] IMD_ResolveChanges(java.lang.String $_String_1, borland.jbcl.dataset.DataSetData $_DataSetData_2, boolean $_boolean_3) throws borland.jbcl.dataset.DataSetException, java.rmi.RemoteException {
        int opnum = 7;
        java.rmi.server.RemoteRef sub = ref;
        java.rmi.server.RemoteCall call = sub.newCall((java.rmi.server.RemoteObject)this, operations, opnum, interfaceHash);
        try {
            java.io.ObjectOutput out = call.getOutputStream();
            out.writeObject($_String_1);
            out.writeObject($_DataSetData_2);
            out.writeBoolean($_boolean_3);
        } catch (java.io.IOException ex) {
            throw new java.rmi.MarshalException("Error marshaling arguments", ex);
        };
        try {
            sub.invoke(call);
        } catch (borland.jbcl.dataset.DataSetException ex) {
            throw ex;
        } catch (java.rmi.RemoteException ex) {
            throw ex;
        } catch (java.lang.Exception ex) {
            throw new java.rmi.UnexpectedException("Unexpected exception", ex);
        };
        borland.jbcl.dataset.DataSetData[] $result;
        try {
            java.io.ObjectInput in = call.getInputStream();
            $result = (borland.jbcl.dataset.DataSetData[])in.readObject();
        } catch (java.io.IOException ex) {
            throw new java.rmi.UnmarshalException("Error unmarshaling return", ex);
        } catch (java.lang.ClassNotFoundException ex) {
            throw new java.rmi.UnmarshalException("Return value class not found", ex);
        } catch (Exception ex) {
            throw new java.rmi.UnexpectedException("Unexpected exception", ex);
        } finally {
            sub.done(call);
        }
        return $result;
    }
    
    // Implementation of IMD_SetQueryText
    public void IMD_SetQueryText(java.lang.String $_String_1, java.lang.String $_String_2, java.lang.String $_String_3) throws borland.jbcl.dataset.DataSetException, java.rmi.RemoteException {
        int opnum = 8;
        java.rmi.server.RemoteRef sub = ref;
        java.rmi.server.RemoteCall call = sub.newCall((java.rmi.server.RemoteObject)this, operations, opnum, interfaceHash);
        try {
            java.io.ObjectOutput out = call.getOutputStream();
            out.writeObject($_String_1);
            out.writeObject($_String_2);
            out.writeObject($_String_3);
        } catch (java.io.IOException ex) {
            throw new java.rmi.MarshalException("Error marshaling arguments", ex);
        };
        try {
            sub.invoke(call);
        } catch (borland.jbcl.dataset.DataSetException ex) {
            throw ex;
        } catch (java.rmi.RemoteException ex) {
            throw ex;
        } catch (java.lang.Exception ex) {
            throw new java.rmi.UnexpectedException("Unexpected exception", ex);
        };
        sub.done(call);
        return;
    }
}
