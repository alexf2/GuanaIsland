// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package G_APPL;

public final class GServer_Stub
    extends java.rmi.server.RemoteStub
    implements G_APPL.IGServer, java.rmi.Remote
{
    private static java.rmi.server.Operation[] operations = {
        new java.rmi.server.Operation("G_APPL.IRefController ConnectClient(java.rmi.dgc.VMID)")
    };
    
    private static final long interfaceHash = 8985613128911870129L;
    
    // Constructors
    public GServer_Stub() {
        super();
    }
    public GServer_Stub(java.rmi.server.RemoteRef rep) {
        super(rep);
    }
    // Methods from remote interfaces
    
    // Implementation of ConnectClient
    public G_APPL.IRefController ConnectClient(java.rmi.dgc.VMID $_VMID_1) throws java.rmi.RemoteException {
        int opnum = 0;
        java.rmi.server.RemoteRef sub = ref;
        java.rmi.server.RemoteCall call = sub.newCall((java.rmi.server.RemoteObject)this, operations, opnum, interfaceHash);
        try {
            java.io.ObjectOutput out = call.getOutputStream();
            out.writeObject($_VMID_1);
        } catch (java.io.IOException ex) {
            throw new java.rmi.MarshalException("Error marshaling arguments", ex);
        };
        try {
            sub.invoke(call);
        } catch (java.rmi.RemoteException ex) {
            throw ex;
        } catch (java.lang.Exception ex) {
            throw new java.rmi.UnexpectedException("Unexpected exception", ex);
        };
        G_APPL.IRefController $result;
        try {
            java.io.ObjectInput in = call.getInputStream();
            $result = (G_APPL.IRefController)in.readObject();
        } catch (java.io.IOException ex) {
            throw new java.rmi.UnmarshalException("Error unmarshaling return", ex);
        } catch (java.lang.ClassNotFoundException ex) {
            throw new java.rmi.UnmarshalException("Return value class not found", ex);
        } catch (Exception ex) {
            throw new java.rmi.UnexpectedException("Unexpected exception", ex);
        } finally {
            sub.done(call);
        }
        return $result;
    }
}
